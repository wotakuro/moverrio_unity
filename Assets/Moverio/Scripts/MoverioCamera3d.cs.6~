using UnityEngine;
using System.Collections;

/// @brief モベリオの3Dカメラ用
/// memo 0.5
public class MoverioCamera3d : MonoBehaviour {

  /// カメラ間の距離（左右でどのくらい距離とる？）
  public float cameraDistance = 0.2f;

  /// 円のボードを置くかどうかのフラグ指定
  public bool useCircleBoard = true;
  /// ジャイロを使うかフラグ
  public bool useGyro = false;

  /// 一つ前のカメラのディスタンス覚えておく
  private float cameraDistOld = -0.1f;

  /// 左カメラ
  private Camera lCam;
  /// 右カメラ
  private Camera rCam;
  /// 左のボード
  private Transform lBoard;
  /// 右のボード
  private Transform rBoard;

  /// デバッグ用に古いマウス位置を覚えておきます
  private Vector3 mouseOldPos;

  // Use this for initialization
  void Start () {
    // 各種オブジェクト指定
    Transform lCamTrans = transform.Find("l_camera"); 
    Transform rCamTrans = transform.Find("r_camera");
    this.rCam = rCamTrans.GetComponent<Camera>();
    this.lCam = lCamTrans.GetComponent<Camera>();
    this.lBoard = lCamTrans.Find("board");
    this.rBoard = rCamTrans.Find("board");

    // ボードの描画順序指定
    this.lBoard.renderer.material.renderQueue = 10000;
    this.rBoard.renderer.material.renderQueue = 10000;

    // ボード描画フラグset
    this.setCircleBoardFlag( this.useCircleBoard );

#if !UNITY_EDITOR &&(UNITY_IPHONE  ||  UNITY_ANDROID)
    // ジャイロの有効か
    if( this.useGyro ){
      Input.gyro.enabled = true;
    }
#endif
    this.cameraDistOld = this.cameraDistance - 1.0f;
  }

  // ポーズ／レジューム処理
  void OnApplicationPause(bool pState){
#if !UNITY_EDITOR &&(UNITY_IPHONE  ||  UNITY_ANDROID)
    if(pState){
      MoverioUtil.setDisplayMode(  MoverioUtil.DISPLAY_MODE_2D );
    }else{
      this.cameraDistOld = this.cameraDistance - 1.0f;
    }
#endif
  }
  
  // Update is called once per frame
  void Update () {
    this.updateCameraDistance();
    if( useGyro ){
      this.gyroUpdate();
    }
    // ボード描画フラグset
    this.setCircleBoardFlag( this.useCircleBoard );
  }

  // カメラ距離の更新
  void updateCameraDistance(){
    // カメラの距離を別にします
    if( this.cameraDistance == this.cameraDistOld ){
      return;
    }
    
    if( this.cameraDistance <= 0.0f ){
      this.cameraDistance = 0.0f;
      this.set2DCameraMode();
    }else if( this.cameraDistOld <= 0.0f ){
      this.set3DCameraMode();
    }
    lCam.transform.localPosition = new Vector3( -this.cameraDistance * 0.5f , 0.0f , 0.0f );
    rCam.transform.localPosition = new Vector3( this.cameraDistance  * 0.5f , 0.0f , 0.0f );
    this.cameraDistOld = this.cameraDistance;
  }

  /// 3Dカメラに切り替えます
  void set3DCameraMode(){
    // Moverio Camera Set
#if !UNITY_EDITOR &&(UNITY_IPHONE  ||  UNITY_ANDROID)
    MoverioUtil.setDisplayMode(  MoverioUtil.DISPLAY_MODE_3D );
#endif
    // 両方有効にする
    lCam.enabled = true;
    rCam.enabled = true;
    // 矩形セット
    lCam.rect = new Rect( 0.0f , 0.0f , 0.5f , 1.0f );
    rCam.rect = new Rect( 0.5f , 0.0f , 0.5f , 1.0f );
    //  アスペクト比を通常に
    lCam.aspect = ((float)Screen.width / (float)Screen.height );
    rCam.aspect = ((float)Screen.width / (float)Screen.height );
  }

  /// 2Dカメラに切り替えます
  void set2DCameraMode(){
    // Moverio Camera Set
#if !UNITY_EDITOR &&(UNITY_IPHONE  ||  UNITY_ANDROID)
    MoverioUtil.setDisplayMode(  MoverioUtil.DISPLAY_MODE_2D );
#endif
    // 両方有効にする
    lCam.enabled = true;
    rCam.enabled = false;
    // 矩形セット
    lCam.rect = new Rect( 0.0f , 0.0f , 1.0f , 1.0f );
    //  アスペクト比を通常に
    lCam.aspect = ((float)Screen.width / (float)Screen.height );
  }

  /// @brief ジャイロの更新
  private void gyroUpdate(){
#if !UNITY_EDITOR &&(UNITY_IPHONE  ||  UNITY_ANDROID)
    //モバイル端末での動作（前回書いたコード）
    Quaternion gyro = Input.gyro.attitude;
    gyro.x = -gyro.x;
    gyro.y = -gyro.y;

    Quaternion rotation = Quaternion.Euler(0, 0, 180) * Quaternion.Euler(-90, 90, 0);
    transform.rotation = rotation * gyro;
    //transform.rotation = gyro;
#else
    if( Input.GetMouseButtonDown(0) ){
      mouseOldPos = Input.mousePosition;
    }else if( Input.GetMouseButton(0) ){
      Vector3 delta = Input.mousePosition - mouseOldPos;
      delta *= 0.1f;
      transform.Rotate( new Vector3(-delta.y , delta.x , delta.z) );
      mouseOldPos = Input.mousePosition;
    }
#endif
  }

  /// 円形のボード出すかのフラグセット
  private void setCircleBoardFlag( bool flag ){
    this.lBoard.renderer.enabled = this.useCircleBoard;
    this.rBoard.renderer.enabled = this.useCircleBoard;
    
  }

  /*
  void OnGUI(){
    GUI.Label(new Rect(10, 10, 300, 50), "Val " + this.cameraDistance);
  }
    */
}
